<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebServiceCSharp</name>
    </assembly>
    <members>
        <member name="T:WebServer.OSXJV">
            <summary>
            HTTPServer that process the incoming requests.
            </summary>
        </member>
        <member name="F:WebServer.OSXJV.running">
            <summary>
            True if the server is able to accept requests.
            </summary>
        </member>
        <member name="F:WebServer.OSXJV.cache">
            <summary>
            Keeps location of cached files
            </summary>
        </member>
        <member name="M:WebServer.OSXJV.#ctor">
            <summary>
            The Server Handler
            </summary>
        </member>
        <member name="M:WebServer.OSXJV.Start">
            <summary>
            Starts server in new thread
            </summary>
        </member>
        <member name="M:WebServer.OSXJV.Run">
            <summary>
            Function that constantly listens for connections
            </summary>
        </member>
        <member name="M:WebServer.OSXJV.GetData(System.IO.Stream)">
            <summary>
            Extract the files from the request
            </summary>
            <param name="input">Requests input stream</param>
            <returns>New Request Object</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when not files are included with the request</exception>
        </member>
        <member name="M:WebServer.OSXJV.SaveFile(System.String,WebServer.Node)">
            <summary>
            Save request's data
            </summary>
            <param name="id">Unique ID</param>
            <param name="nodes">The Processed Data</param>
            <returns>if successful</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodes is null or id is null or empty</exception>
            <exception cref="T:System.IO.IOException">Thrown when access to the disk is unavailable</exception>
        </member>
        <member name="T:WebServer.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Attribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Attribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:WebServer.Node">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebServer.Node.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Number">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Comments">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebServer.Node.Visited">
            <summary>
            
            </summary>
        </member>
        <member name="T:WebServer.Output">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebServer.Output.#ctor(WebServer.Node)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:WebServer.Output.CreateGrid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebServer.Output.GridGetChidren(WebServer.Node)">
            <summary>
            
            </summary>
            <param name="n">Child Node</param>
            <returns></returns>
        </member>
        <member name="M:WebServer.Output.CreateView(System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:WebServer.Output.CheckNodeNumber(WebServer.Node,System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:WebServer.Process">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebServer.Process.#ctor(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Initalisation of the object that prepares before processing
            </summary>
            <param name="doc">The document</param>
            <param name="type">The document file type</param>
        </member>
        <member name="M:WebServer.Process.GetProcess(System.String,System.String)">
            <summary>
            Creates and returns a new process object
            </summary>
            <param name="data">The document in string form</param>
            <param name="type">The type of document</param>
            <returns>New Process object</returns>
        </member>
        <member name="M:WebServer.Process.ProcessDocument">
            <summary>
            Processes the document sent via server
            </summary>
            <returns>Returns a root node that has been calculated from the document</returns>
        </member>
        <member name="M:WebServer.Process.ProcessElement(System.Xml.Linq.XElement,WebServer.Node)">
            <summary>
            Processes an Element within the document
            </summary>
            <param name="e">The element</param>
            <param name="node">The parent node</param>
            <returns></returns>
        </member>
        <member name="M:WebServer.Process.ProcessComment(System.Xml.Linq.XComment,WebServer.Node)">
            <summary>
            Process a comment that was in the document
            </summary>
            <param name="e">The comment element</param>
            <param name="node">The parent node</param>
        </member>
        <member name="M:WebServer.Process.ProcessText(System.Xml.Linq.XText,WebServer.Node)">
            <summary>
            Processes text that was in the document
            </summary>
            <param name="e">A Text element</param>
            <param name="n">The parent node</param>
        </member>
        <member name="M:WebServer.Process.Prepare(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:WebServer.Program">
            <summary>
            The Initialiser
            </summary>
        </member>
        <member name="M:WebServer.Program.Main(System.String[])">
            <summary>
            The Main function that starts the HttpServer
            </summary>
            <param name="args">Not Used</param>
        </member>
        <member name="T:WebServer.Request">
            <summary>
            
            </summary>
        </member>
        <member name="F:WebServer.Request.filename">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebServer.Request.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialises the Request object, can only be called from GetRequest(...).
            </summary>
            <param name="filename">The document filename e.g. Test</param>
            <param name="type">The document file type e.g. text/xml</param>
            <param name="data">The document data e.g. {"name":"bob,"address":"123 Somewhere"}"</param>
        </member>
        <member name="M:WebServer.Request.GetRequest(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="filename">The document filename e.g. Test</param>
            <param name="type">The document file type e.g. text/xml</param>
            <param name="data">The document data e.g. {"name":"bob,"address":"123 Somewhere"}"</param>
            <returns></returns>
        </member>
        <member name="P:WebServer.Request.Filename">
            <summary>
            To retrieve the filename of the document
            </summary>
        </member>
        <member name="P:WebServer.Request.Type">
            <summary>
            To retrieve type of document
            </summary>
        </member>
        <member name="P:WebServer.Request.Data">
            <summary>
            To retrieve the document data
            </summary>
        </member>
        <member name="T:WebServer.Response">
            <summary>
            
            </summary>
        </member>
        <member name="F:WebServer.Response.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:WebServer.Response.status">
            <summary>
            
            </summary>
        </member>
        <member name="F:WebServer.Response.mime">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebServer.Response.#ctor(System.Int32,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="status"></param>
            <param name="mime"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:WebServer.Response.GetResponse(System.Int32,System.String,System.Byte[])">
            <summary>
            A custom response object
            </summary>
            <param name="status">The HTTP Code to send back e.g. 200 for success</param>
            <param name="type">Data type to send back e.g. application/json</param>
            <param name="data">The data to send</param>
            <returns></returns>
        </member>
        <member name="M:WebServer.Response.GetResponseJSON(System.Int32,System.Byte[])">
            <summary>
            Return an application/json response
            </summary>
            <param name="status">The HTTP Code to send back e.g. 200 for success</param>
            <param name="data">The data to send</param>
            <returns>New response object</returns>
        </member>
        <member name="M:WebServer.Response.GetResponseXML(System.Int32,System.Byte[])">
            <summary>
            Return an text/xml response
            </summary>
            <param name="status">The HTTP Code to send back e.g. 200 for success</param>
            <param name="data">The data to send</param>
            <returns>New response object</returns>
        </member>
        <member name="M:WebServer.Response.GetErrorResponse">
            <summary>
            Return a error response object
            </summary>
            <returns>New response object</returns>
        </member>
        <member name="M:WebServer.Response.GetInvalidRequestResponse">
            <summary>
            Returns an invalid response object
            </summary>
            <returns>New response object</returns>
        </member>
        <member name="T:WebServer.Validation">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebServer.Validation.CheckDocument(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
